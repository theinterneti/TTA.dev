{
  "version": "2.0.0",
  "tasks": [
    {
      "label": "🧪 Run All Tests",
      "type": "shell",
      "command": "uv run pytest -v",
      "group": {
        "kind": "test",
        "isDefault": true
      },
      "presentation": {
        "reveal": "always",
        "panel": "new",
        "clear": true
      },
      "problemMatcher": []
    },
    {
      "label": "🧪 Run Tests with Coverage",
      "type": "shell",
      "command": "uv run pytest --cov=packages --cov-report=html --cov-report=term-missing",
      "group": "test",
      "presentation": {
        "reveal": "always",
        "panel": "new",
        "clear": true
      },
      "problemMatcher": []
    },
    {
      "label": "✨ Format Code",
      "type": "shell",
      "command": "uv run ruff format .",
      "group": "build",
      "presentation": {
        "reveal": "silent",
        "panel": "shared"
      },
      "problemMatcher": []
    },
    {
      "label": "🔍 Lint Code",
      "type": "shell",
      "command": "uv run ruff check . --fix",
      "group": "build",
      "presentation": {
        "reveal": "always",
        "panel": "shared"
      },
      "problemMatcher": []
    },
    {
      "label": "🔬 Type Check",
      "type": "shell",
      "command": "uvx pyright packages/",
      "group": "build",
      "presentation": {
        "reveal": "always",
        "panel": "shared"
      },
      "problemMatcher": []
    },
    {
      "label": "✅ Quality Check (All)",
      "type": "shell",
      "command": "echo '=== Formatting ===' && uv run ruff format . && echo '' && echo '=== Linting ===' && uv run ruff check . --fix && echo '' && echo '=== Type Checking ===' && uvx pyright packages/ && echo '' && echo '=== Tests ===' && uv run pytest -v",
      "group": "build",
      "presentation": {
        "reveal": "always",
        "panel": "new",
        "clear": true
      },
      "problemMatcher": []
    },
    {
      "label": "📦 Validate Package",
      "type": "shell",
      "command": "./scripts/validate-package.sh ${input:packageName}",
      "group": "build",
      "presentation": {
        "reveal": "always",
        "panel": "new"
      },
      "problemMatcher": []
    },
    {
      "label": "📦 Sync Dependencies",
      "type": "shell",
      "command": "uv sync --all-extras",
      "group": "build",
      "presentation": {
        "reveal": "always",
        "panel": "shared"
      },
      "problemMatcher": []
    },
    {
      "label": "🧹 Clean Build Artifacts",
      "type": "shell",
      "command": "find . -type d -name '__pycache__' -exec rm -rf {} + 2>/dev/null; find . -type d -name '.pytest_cache' -exec rm -rf {} + 2>/dev/null; find . -type d -name '.ruff_cache' -exec rm -rf {} + 2>/dev/null; find . -type d -name '.mypy_cache' -exec rm -rf {} + 2>/dev/null; echo '✅ Cleaned build artifacts'",
      "group": "build",
      "presentation": {
        "reveal": "always",
        "panel": "shared"
      },
      "problemMatcher": []
    },
    {
      "label": "🏷️ Create Release Tag",
      "type": "shell",
      "command": "git tag -a ${input:releaseTag} -m 'Release ${input:releaseTag}' && git push origin ${input:releaseTag}",
      "group": "none",
      "presentation": {
        "reveal": "always",
        "panel": "new"
      },
      "problemMatcher": []
    },
    {
      "label": "🔬 Observability Health Check",
      "type": "shell",
      "command": "uv run python -c 'from observability_integration import initialize_observability, is_observability_enabled; success = initialize_observability(service_name=\"tta-dev\", enable_prometheus=True, enable_console_traces=True); print(\"✅ Observability OK\" if success and is_observability_enabled() else \"❌ Observability Failed\")'",
      "group": "test",
      "presentation": {
        "reveal": "always",
        "panel": "shared"
      },
      "problemMatcher": []
    },
    {
      "label": "🧪 Run Keploy API Tests",
      "type": "shell",
      "command": "uv run pytest packages/keploy-framework/tests/ -v",
      "group": "test",
      "presentation": {
        "reveal": "always",
        "panel": "new"
      },
      "problemMatcher": []
    },
    {
      "label": "📹 Record Keploy API Tests",
      "type": "shell",
      "command": "echo 'Start your API server first, then run: uv run python -m keploy_framework.cli record --app-cmd \"uvicorn main:app\"'",
      "group": "test",
      "presentation": {
        "reveal": "always",
        "panel": "new"
      },
      "problemMatcher": []
    },
    {
      "label": "💰 Validate Cost Optimization",
      "type": "shell",
      "command": "uv run python scripts/validation/validate-cost-optimization.py",
      "group": "test",
      "presentation": {
        "reveal": "always",
        "panel": "shared"
      },
      "problemMatcher": []
    },
    {
      "label": "🚀 Validate LLM Efficiency",
      "type": "shell",
      "command": "uv run python scripts/validation/validate-llm-efficiency.py",
      "group": "test",
      "presentation": {
        "reveal": "always",
        "panel": "shared"
      },
      "problemMatcher": []
    },
    {
      "label": "🐳 Start Test Services",
      "type": "shell",
      "command": "docker-compose -f docker-compose.test.yml up -d && echo '✅ Test services started (Redis, Prometheus)'",
      "group": "test",
      "presentation": {
        "reveal": "always",
        "panel": "shared"
      },
      "problemMatcher": []
    },
    {
      "label": "🐳 Stop Test Services",
      "type": "shell",
      "command": "docker-compose -f docker-compose.test.yml down && echo '✅ Test services stopped'",
      "group": "test",
      "presentation": {
        "reveal": "always",
        "panel": "shared"
      },
      "problemMatcher": []
    },
    {
      "label": "🧪 Run All Integration Tests",
      "type": "shell",
      "command": "docker-compose -f docker-compose.test.yml up -d && sleep 3 && uv run pytest tests/integration/ -v && docker-compose -f docker-compose.test.yml down",
      "group": "test",
      "presentation": {
        "reveal": "always",
        "panel": "new"
      },
      "problemMatcher": []
    }
  ],
  "inputs": [
    {
      "id": "packageName",
      "type": "promptString",
      "description": "Package name to validate (e.g., tta-workflow-primitives)"
    },
    {
      "id": "releaseTag",
      "type": "promptString",
      "description": "Release tag (e.g., v0.1.0)"
    }
  ]
}
