[project]
name = "tta-agent-coordination"
version = "0.1.0"
description = "Redis-based multi-agent coordination primitives for distributed agent systems"
readme = "README.md"
requires-python = ">=3.12"
license = {text = "MIT"}
authors = [
    {name = "TTA.dev Team", email = "theinternetisbig@gmail.com"}
]
keywords = ["agent", "coordination", "redis", "multi-agent", "distributed-systems"]
classifiers = [
    "Development Status :: 3 - Alpha",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.12",
    "Topic :: Software Development :: Libraries :: Python Modules",
    "Topic :: System :: Distributed Computing",
]

dependencies = [
    "redis>=6.0.0",
    "pydantic>=2.0.0",
]

[project.optional-dependencies]
dev = [
    "pytest>=8.0.0",
    "pytest-asyncio>=0.23.0",
    "pytest-cov>=4.1.0",
    "fakeredis>=2.21.0",
    "pyright>=1.1.350",
    "ruff>=0.2.0",
]

[project.urls]
Homepage = "https://github.com/theinterneti/TTA.dev"
Repository = "https://github.com/theinterneti/TTA.dev"
Documentation = "https://github.com/theinterneti/TTA.dev/tree/main/tta-agent-coordination/docs"
Issues = "https://github.com/theinterneti/TTA.dev/issues"

[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[tool.hatch.build.targets.wheel]
packages = ["src/tta_agent_coordination"]

[tool.pytest.ini_options]
minversion = "8.0"
addopts = [
    "-ra",
    "--strict-markers",
    "--strict-config",
    "--cov=tta_agent_coordination",
    "--cov-report=term-missing",
    "--cov-report=html",
]
testpaths = ["tests"]
asyncio_mode = "auto"
markers = [
    "redis: marks tests that require Redis",
    "integration: marks integration tests",
    "slow: marks slow-running tests",
]

[tool.coverage.run]
source = ["src"]
omit = ["tests/*", "*/conftest.py"]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "raise AssertionError",
    "raise NotImplementedError",
    "if __name__ == .__main__.:",
    "if TYPE_CHECKING:",
    "@abstractmethod",
]

[tool.pyright]
include = ["src", "tests"]
exclude = ["**/__pycache__"]
pythonVersion = "3.12"
typeCheckingMode = "strict"
reportMissingTypeStubs = false
reportUnknownMemberType = false
reportUnknownArgumentType = false
reportUnknownVariableType = false

[tool.ruff]
target-version = "py312"
line-length = 100
src = ["src", "tests"]

[tool.ruff.lint]
select = [
    "E",   # pycodestyle errors
    "W",   # pycodestyle warnings
    "F",   # pyflakes
    "I",   # isort
    "B",   # flake8-bugbear
    "C4",  # flake8-comprehensions
    "UP",  # pyupgrade",
]
ignore = [
    "E501",  # line too long (handled by formatter)
]

[tool.ruff.lint.per-file-ignores]
"tests/**/*.py" = ["B", "F841"]

[tool.ruff.lint.isort]
known-first-party = ["tta_agent_coordination"]
