{
  "version": "2.0.0",
  "tasks": [
    {
      "label": "üß™ Run All Tests",
      "type": "shell",
      "command": "uv run pytest -v",
      "group": {
        "kind": "test",
        "isDefault": true
      },
      "presentation": {
        "reveal": "always",
        "panel": "new",
        "clear": true
      },
      "problemMatcher": []
    },
    {
      "label": "üß™ Run Tests with Coverage",
      "type": "shell",
      "command": "uv run pytest --cov=packages --cov-report=html --cov-report=term-missing",
      "group": "test",
      "presentation": {
        "reveal": "always",
        "panel": "new",
        "clear": true
      },
      "problemMatcher": []
    },
    {
      "label": "‚ú® Format Code",
      "type": "shell",
      "command": "uv run ruff format .",
      "group": "build",
      "presentation": {
        "reveal": "silent",
        "panel": "shared"
      },
      "problemMatcher": []
    },
    {
      "label": "üîç Lint Code",
      "type": "shell",
      "command": "uv run ruff check . --fix",
      "group": "build",
      "presentation": {
        "reveal": "always",
        "panel": "shared"
      },
      "problemMatcher": []
    },
    {
      "label": "üî¨ Type Check",
      "type": "shell",
      "command": "uvx pyright packages/",
      "group": "build",
      "presentation": {
        "reveal": "always",
        "panel": "shared"
      },
      "problemMatcher": []
    },
    {
      "label": "‚úÖ Quality Check (All)",
      "type": "shell",
      "command": "echo '=== Formatting ===' && uv run ruff format . && echo '' && echo '=== Linting ===' && uv run ruff check . --fix && echo '' && echo '=== Type Checking ===' && uvx pyright packages/ && echo '' && echo '=== Tests ===' && uv run pytest -v",
      "group": "build",
      "presentation": {
        "reveal": "always",
        "panel": "new",
        "clear": true
      },
      "problemMatcher": []
    },
    {
      "label": "üì¶ Validate Package",
      "type": "shell",
      "command": "./scripts/validate-package.sh ${input:packageName}",
      "group": "build",
      "presentation": {
        "reveal": "always",
        "panel": "new"
      },
      "problemMatcher": []
    },
    {
      "label": "üì¶ Sync Dependencies",
      "type": "shell",
      "command": "uv sync --all-extras",
      "group": "build",
      "presentation": {
        "reveal": "always",
        "panel": "shared"
      },
      "problemMatcher": []
    },
    {
      "label": "üßπ Clean Build Artifacts",
      "type": "shell",
      "command": "find . -type d -name '__pycache__' -exec rm -rf {} + 2>/dev/null; find . -type d -name '.pytest_cache' -exec rm -rf {} + 2>/dev/null; find . -type d -name '.ruff_cache' -exec rm -rf {} + 2>/dev/null; find . -type d -name '.mypy_cache' -exec rm -rf {} + 2>/dev/null; echo '‚úÖ Cleaned build artifacts'",
      "group": "build",
      "presentation": {
        "reveal": "always",
        "panel": "shared"
      },
      "problemMatcher": []
    },
    {
      "label": "üè∑Ô∏è Create Release Tag",
      "type": "shell",
      "command": "git tag -a ${input:releaseTag} -m 'Release ${input:releaseTag}' && git push origin ${input:releaseTag}",
      "group": "none",
      "presentation": {
        "reveal": "always",
        "panel": "new"
      },
      "problemMatcher": []
    }
  ],
  "inputs": [
    {
      "id": "packageName",
      "type": "promptString",
      "description": "Package name to validate (e.g., tta-workflow-primitives)"
    },
    {
      "id": "releaseTag",
      "type": "promptString",
      "description": "Release tag (e.g., v0.1.0)"
    }
  ]
}
