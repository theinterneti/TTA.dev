version: '3.8'

services:
  # Neo4j Database Service
  neo4j:
    image: neo4j:5.13.0
    container_name: tta-neo4j
    ports:
      - "7474:7474"  # HTTP browser interface
      - "7687:7687"  # Bolt port
    volumes:
      - neo4j-data:/data
      - ./neo4j/conf:/conf
      - ./neo4j/logs:/logs
      - ./neo4j/plugins:/plugins
    environment:
      NEO4J_AUTH: neo4j/${NEO4J_PASSWORD:-password}
      NEO4J_PLUGINS: "apoc"
      NEO4J_dbms_security_procedures_unrestricted: apoc.*
      NEO4J_server_memory_heap_initial__size: 512m
      NEO4J_server_memory_heap_max__size: 2G
      NEO4J_server_memory_pagecache_size: 1G
    restart: unless-stopped

  # TTA Python Application Service
  app:
    build:
      context: .
      dockerfile: Dockerfile
      args:
        - REQUIREMENTS_FILE=requirements.txt
    container_name: tta-app
    volumes:
      - .:/app:delegated
      - huggingface-cache:/root/.cache/huggingface
      - model-cache:/app/.model_cache
      - vscode:/vscode
    env_file:
      - .env
    environment:
      - PYTHONPATH=/app
      - NVIDIA_VISIBLE_DEVICES=all
      - NEO4J_URI=bolt://neo4j:7687
      - NEO4J_USERNAME=neo4j
      - NEO4J_PASSWORD=${NEO4J_PASSWORD:-password}
      - MODEL_CACHE_DIR=/app/.model_cache
    deploy:
      resources:
        reservations:
          devices:
            - driver: nvidia
              count: all
              capabilities: [gpu]
    depends_on:
      - neo4j
    stdin_open: true
    tty: true
    # Install post-build requirements after container starts
    # Use a safer command that doesn't fail if clean_venv.sh doesn't exist
    command: >
      bash -c "./install_post_build_requirements.sh && ([ -f ./clean_venv.sh ] && ./clean_venv.sh || echo 'clean_venv.sh not found, skipping') && bash"

volumes:
  neo4j-data:
  huggingface-cache:
  model-cache:
  vscode:
