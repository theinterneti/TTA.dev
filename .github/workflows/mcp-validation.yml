name: MCP Validation & Agent Testing

on:
  pull_request:
    branches: [main]
  push:
    branches: [main]

jobs:
  validate-mcp-schemas:
    name: Validate MCP Tool Schemas
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'
      
      - name: Install uv
        run: curl -LsSf https://astral.sh/uv/install.sh | sh
      
      - name: Add uv to PATH
        run: echo "$HOME/.cargo/bin" >> $GITHUB_PATH
      
      - name: Install dependencies
        run: uv sync --all-extras
      
      - name: Install APM (Agent Package Manager)
        run: npm install -g @agentic/apm
      
      - name: Validate MCP tool definitions
        run: |
          # Validate that MCP server configurations are correct
          apm validate --mcp
      
      - name: Check tool schema consistency
        run: |
          # Ensure tool schemas match implementation
          python scripts/validate-mcp-schemas.py

  validate-agent-instructions:
    name: Validate Agent Instructions
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Install APM
        run: npm install -g @agentic/apm
      
      - name: Validate instruction structure
        run: |
          # Check that .instructions.md files follow standards
          apm validate --instructions
      
      - name: Check instruction consistency
        run: |
          # Ensure no conflicting instructions
          python scripts/validate-instruction-consistency.py
      
      - name: Compile to AGENTS.md
        run: |
          # Compile modular instructions to universal standard
          apm compile
          
          # Verify compilation succeeded
          if [ ! -f "AGENTS.md" ]; then
            echo "❌ AGENTS.md compilation failed"
            exit 1
          fi
          
          echo "✅ AGENTS.md compiled successfully"

  validate-docstrings:
    name: Validate LLM-Friendly Documentation
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'
      
      - name: Install dependencies
        run: |
          curl -LsSf https://astral.sh/uv/install.sh | sh
          echo "$HOME/.cargo/bin" >> $GITHUB_PATH
          uv sync --all-extras
      
      - name: Validate docstring clarity
        run: |
          # Use LLM to check if docstrings are clear to agents
          python scripts/validate-llm-docstrings.py
        env:
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}

  test-tool-boundaries:
    name: Test MCP Tool Boundaries
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Install APM
        run: npm install -g @agentic/apm
      
      - name: Install dependencies
        run: |
          curl -LsSf https://astral.sh/uv/install.sh | sh
          echo "$HOME/.cargo/bin" >> $GITHUB_PATH
          uv sync --all-extras
      
      - name: Test read-only boundaries
        run: |
          # Execute workflow that attempts write with read-only mode
          # Should fail if boundaries are correct
          apm run test-read-only-boundary || echo "✅ Read-only boundary enforced"
      
      - name: Test write boundaries
        run: |
          # Execute workflow with proper write access
          # Should succeed
          apm run test-write-boundary

  execute-agentic-workflows:
    name: Execute Agentic Workflows
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Install APM
        run: npm install -g @agentic/apm
      
      - name: Install GitHub Copilot CLI
        run: npm install -g @githubnext/github-copilot-cli
      
      - name: Execute test workflows
        run: |
          # Run agentic workflows defined in .prompt.md files
          # Tests real-world execution with MCP tools
          apm run validate-workflow-execution
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  publish-package:
    name: Publish Agent Package
    runs-on: ubuntu-latest
    needs: [validate-mcp-schemas, validate-agent-instructions, validate-docstrings, test-tool-boundaries]
    if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/v')
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Install APM
        run: npm install -g @agentic/apm
      
      - name: Compile context
        run: apm compile
      
      - name: Publish to GitHub Registry
        run: apm publish
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
