name: üß™ Test Gemini API Key

on:
  workflow_dispatch:

jobs:
  test-api-key:
    name: Test GEMINI_API_KEY validity
    runs-on: ubuntu-latest
    
    steps:
      - name: Test API key with simple request
        env:
          GEMINI_API_KEY: ${{ secrets.GEMINI_API_KEY }}
        run: |
          echo "=== Testing GEMINI_API_KEY validity ==="
          echo ""
          
          if [ -z "$GEMINI_API_KEY" ]; then
            echo "‚ùå ERROR: GEMINI_API_KEY secret is not set!"
            exit 1
          fi
          
          echo "‚úÖ GEMINI_API_KEY secret is set"
          echo "   Length: ${#GEMINI_API_KEY} characters"
          echo ""
          
          echo "Testing API key with Gemini API..."
          echo "Endpoint: https://generativelanguage.googleapis.com/v1beta/models/gemini-pro:generateContent"
          echo ""
          
          # Make a simple test request
          RESPONSE=$(curl -s -w "\nHTTP_CODE:%{http_code}" \
            -H "Content-Type: application/json" \
            -d '{
              "contents": [{
                "parts": [{
                  "text": "Hello! Please respond with just the word OK."
                }]
              }]
            }' \
            "https://generativelanguage.googleapis.com/v1beta/models/gemini-pro:generateContent?key=${GEMINI_API_KEY}")
          
          HTTP_CODE=$(echo "$RESPONSE" | grep "HTTP_CODE:" | cut -d: -f2)
          BODY=$(echo "$RESPONSE" | sed '/HTTP_CODE:/d')
          
          echo "HTTP Status Code: $HTTP_CODE"
          echo ""
          
          case "$HTTP_CODE" in
            200)
              echo "‚úÖ SUCCESS: API key is VALID and working!"
              echo ""
              echo "Response:"
              echo "$BODY" | jq '.' || echo "$BODY"
              ;;
            400)
              echo "‚ö†Ô∏è  Bad Request (400)"
              echo "API key might be valid but request format is wrong"
              echo ""
              echo "Response:"
              echo "$BODY" | jq '.' || echo "$BODY"
              exit 1
              ;;
            401)
              echo "‚ùå Unauthorized (401)"
              echo "API key is INVALID or EXPIRED"
              echo ""
              echo "Response:"
              echo "$BODY" | jq '.' || echo "$BODY"
              exit 1
              ;;
            403)
              echo "‚ùå Forbidden (403)"
              echo "API key lacks permissions or quota exceeded"
              echo ""
              echo "Response:"
              echo "$BODY" | jq '.' || echo "$BODY"
              exit 1
              ;;
            429)
              echo "‚ö†Ô∏è  Rate Limited (429)"
              echo "Too many requests - quota or rate limit exceeded"
              echo ""
              echo "Response:"
              echo "$BODY" | jq '.' || echo "$BODY"
              exit 1
              ;;
            *)
              echo "‚ùì Unexpected status code: $HTTP_CODE"
              echo ""
              echo "Response:"
              echo "$BODY" | jq '.' || echo "$BODY"
              exit 1
              ;;
          esac
          
      - name: Test with gemini-2.0-flash-exp model
        env:
          GEMINI_API_KEY: ${{ secrets.GEMINI_API_KEY }}
        run: |
          echo ""
          echo "=== Testing with gemini-2.0-flash-exp model ==="
          echo ""
          
          RESPONSE=$(curl -s -w "\nHTTP_CODE:%{http_code}" \
            -H "Content-Type: application/json" \
            -d '{
              "contents": [{
                "parts": [{
                  "text": "Say OK"
                }]
              }]
            }' \
            "https://generativelanguage.googleapis.com/v1beta/models/gemini-2.0-flash-exp:generateContent?key=${GEMINI_API_KEY}")
          
          HTTP_CODE=$(echo "$RESPONSE" | grep "HTTP_CODE:" | cut -d: -f2)
          BODY=$(echo "$RESPONSE" | sed '/HTTP_CODE:/d')
          
          echo "HTTP Status Code: $HTTP_CODE"
          echo ""
          
          if [ "$HTTP_CODE" == "200" ]; then
            echo "‚úÖ gemini-2.0-flash-exp model is accessible"
            echo "$BODY" | jq '.candidates[0].content.parts[0].text' || echo "$BODY"
          else
            echo "‚ö†Ô∏è  gemini-2.0-flash-exp returned $HTTP_CODE"
            echo "$BODY" | jq '.' || echo "$BODY"
          fi
          
      - name: List available models
        env:
          GEMINI_API_KEY: ${{ secrets.GEMINI_API_KEY }}
        run: |
          echo ""
          echo "=== Listing available models ==="
          echo ""
          
          RESPONSE=$(curl -s -w "\nHTTP_CODE:%{http_code}" \
            "https://generativelanguage.googleapis.com/v1beta/models?key=${GEMINI_API_KEY}")
          
          HTTP_CODE=$(echo "$RESPONSE" | grep "HTTP_CODE:" | cut -d: -f2)
          BODY=$(echo "$RESPONSE" | sed '/HTTP_CODE:/d')
          
          if [ "$HTTP_CODE" == "200" ]; then
            echo "‚úÖ Successfully retrieved model list"
            echo ""
            echo "Available models:"
            echo "$BODY" | jq -r '.models[] | select(.name | contains("gemini")) | .name' || echo "$BODY"
          else
            echo "‚ùå Failed to retrieve model list (HTTP $HTTP_CODE)"
            echo "$BODY" | jq '.' || echo "$BODY"
          fi
          
      - name: Summary
        if: always()
        run: |
          echo ""
          echo "=== Test Summary ==="
          echo ""
          echo "If all tests passed:"
          echo "  ‚úÖ API key is valid and working"
          echo "  ‚úÖ Can access Gemini models via AI Studio API"
          echo "  ‚úÖ No quota or permission issues"
          echo ""
          echo "If tests failed:"
          echo "  ‚ùå Check the error messages above"
          echo "  ‚ùå Verify API key is from Google AI Studio (not Vertex AI)"
          echo "  ‚ùå Check quota limits at https://aistudio.google.com/"

