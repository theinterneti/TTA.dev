"""Tests for Workflow Hub Generator Primitive."""

from pathlib import Path

import pytest

from tta_dev_primitives.workflow_hub import (
    GenerateWorkflowHubPrimitive,
    WorkflowMode,
)


@pytest.fixture
def workflow_hub():
    """Fixture providing workflow hub primitive."""
    return GenerateWorkflowHubPrimitive()


@pytest.fixture
def temp_workflow_md(tmp_path):
    """Fixture providing temporary WORKFLOW.md path."""
    return tmp_path / "WORKFLOW.md"


def test_workflow_hub_initialization(workflow_hub):
    """Test workflow hub initializes correctly."""
    assert workflow_hub.profiles_dir == Path(".universal-instructions/workflows")
    assert workflow_hub.output_path == Path("WORKFLOW.md")
    assert len(workflow_hub.profiles) == 3


def test_workflow_hub_loads_all_profiles(workflow_hub):
    """Test all three workflow profiles are loaded."""
    assert WorkflowMode.RAPID in workflow_hub.profiles
    assert WorkflowMode.STANDARD in workflow_hub.profiles
    assert WorkflowMode.AUGSTER_RIGOROUS in workflow_hub.profiles


def test_rapid_profile_structure(workflow_hub):
    """Test rapid profile has correct structure."""
    rapid = workflow_hub.get_profile(WorkflowMode.RAPID)
    assert rapid is not None
    assert rapid.display_name == "Rapid Mode"
    assert len(rapid.stages) == 3
    assert rapid.stages[0].name == "Understand"
    assert rapid.stages[1].name == "Implement"
    assert rapid.stages[2].name == "Quick Test"
    assert not rapid.is_default


def test_standard_profile_structure(workflow_hub):
    """Test standard profile has correct structure."""
    standard = workflow_hub.get_profile(WorkflowMode.STANDARD)
    assert standard is not None
    assert standard.display_name == "Standard Mode"
    assert len(standard.stages) == 5
    assert standard.stages[0].name == "Understand"
    assert standard.stages[1].name == "Decompose"
    assert standard.stages[2].name == "Plan"
    assert standard.stages[3].name == "Implement"
    assert standard.stages[4].name == "Validate"
    assert standard.is_default


def test_augster_rigorous_profile_structure(workflow_hub):
    """Test augster-rigorous profile has correct structure."""
    augster = workflow_hub.get_profile(WorkflowMode.AUGSTER_RIGOROUS)
    assert augster is not None
    assert augster.display_name == "Augster-Rigorous Mode"
    assert len(augster.stages) == 6
    assert augster.stages[0].name == "Understand"
    assert augster.stages[1].name == "Decompose"
    assert augster.stages[2].name == "Plan"
    assert augster.stages[3].name == "Implement"
    assert augster.stages[4].name == "Validate"
    assert augster.stages[5].name == "Reflect"
    assert not augster.is_default


def test_get_default_profile(workflow_hub):
    """Test default profile retrieval."""
    default = workflow_hub.get_default_profile()
    assert default is not None
    assert default.mode == WorkflowMode.STANDARD
    assert default.is_default


def test_get_profile_by_mode(workflow_hub):
    """Test profile retrieval by mode."""
    rapid = workflow_hub.get_profile(WorkflowMode.RAPID)
    standard = workflow_hub.get_profile(WorkflowMode.STANDARD)
    augster = workflow_hub.get_profile(WorkflowMode.AUGSTER_RIGOROUS)

    assert rapid.mode == WorkflowMode.RAPID
    assert standard.mode == WorkflowMode.STANDARD
    assert augster.mode == WorkflowMode.AUGSTER_RIGOROUS


def test_get_nonexistent_profile(workflow_hub):
    """Test getting nonexistent profile returns None."""
    result = workflow_hub.get_profile("nonexistent")
    assert result is None


def test_summary_structure(workflow_hub):
    """Test summary provides correct statistics."""
    summary = workflow_hub.summary()
    assert summary["total_profiles"] == 3
    assert summary["default_mode"] == "standard"
    assert len(summary["modes"]) == 3
    assert "rapid" in summary["modes"]
    assert "standard" in summary["modes"]
    assert "augster-rigorous" in summary["modes"]


def test_generate_workflow_hub(workflow_hub, temp_workflow_md):
    """Test WORKFLOW.md generation."""
    workflow_hub.output_path = temp_workflow_md
    workflow_hub.generate_workflow_hub()

    assert temp_workflow_md.exists()
    content = temp_workflow_md.read_text()

    # Check header
    assert "# WORKFLOW - AI Agent Execution Modes" in content

    # Check all profiles mentioned
    assert "Rapid Mode" in content
    assert "Standard Mode" in content
    assert "Augster-Rigorous Mode" in content

    # Check sections present
    assert "## Overview" in content
    assert "## Quick Reference" in content
    assert "## Workflow Profiles" in content
    assert "## Selecting a Workflow Mode" in content
    assert "## Memory Layer Integration" in content
    assert "## Examples" in content

    # Check footer
    assert "**Generated by**: GenerateWorkflowHubPrimitive" in content


def test_generate_workflow_hub_empty_profiles():
    """Test generation fails with no profiles."""
    hub = GenerateWorkflowHubPrimitive()
    hub.profiles = {}  # Clear profiles

    with pytest.raises(ValueError, match="No workflow profiles loaded"):
        hub.generate_workflow_hub()


def test_memory_layers_by_mode(workflow_hub):
    """Test memory layer usage differs by mode."""
    rapid = workflow_hub.get_profile(WorkflowMode.RAPID)
    standard = workflow_hub.get_profile(WorkflowMode.STANDARD)
    augster = workflow_hub.get_profile(WorkflowMode.AUGSTER_RIGOROUS)

    # Rapid uses minimal memory
    rapid_understand = rapid.stages[0]
    assert "Session Context" in rapid_understand.memory_layers
    assert len(rapid_understand.memory_layers) == 1

    # Standard uses moderate memory
    standard_understand = standard.stages[0]
    assert "Session Context" in standard_understand.memory_layers
    assert len(standard_understand.memory_layers) == 3

    # Augster uses maximum memory
    augster_understand = augster.stages[0]
    assert "Full Session History" in augster_understand.memory_layers
    assert len(augster_understand.memory_layers) == 5


def test_quality_gates_by_mode(workflow_hub):
    """Test quality gates increase with rigor."""
    rapid = workflow_hub.get_profile(WorkflowMode.RAPID)
    standard = workflow_hub.get_profile(WorkflowMode.STANDARD)
    augster = workflow_hub.get_profile(WorkflowMode.AUGSTER_RIGOROUS)

    # Rapid has minimal gates
    assert len(rapid.quality_gates) == 1
    assert "Syntax valid" in rapid.quality_gates[0]

    # Standard has moderate gates
    assert len(standard.quality_gates) == 4
    assert any("Format valid" in gate for gate in standard.quality_gates)
    assert any("Lint passing" in gate for gate in standard.quality_gates)

    # Augster has comprehensive gates
    assert len(augster.quality_gates) == 8
    assert any("Coverage" in gate for gate in augster.quality_gates)
    assert any("Type checking" in gate for gate in augster.quality_gates)
    assert any("Security scan" in gate for gate in augster.quality_gates)


def test_duration_estimates(workflow_hub):
    """Test duration estimates are present for all stages."""
    for profile in workflow_hub.profiles.values():
        for stage in profile.stages:
            assert stage.duration_estimate
            assert "minute" in stage.duration_estimate.lower()


def test_workflow_stages_logical_progression(workflow_hub):
    """Test workflow stages follow logical progression."""
    # Standard mode should have: Understand → Decompose → Plan → Implement → Validate
    standard = workflow_hub.get_profile(WorkflowMode.STANDARD)
    stage_names = [s.name for s in standard.stages]

    assert stage_names[0] == "Understand"
    assert "Decompose" in stage_names or "Plan" in stage_names
    assert "Implement" in stage_names
    assert stage_names[-1] == "Validate"

    # Augster mode should add Reflect at the end
    augster = workflow_hub.get_profile(WorkflowMode.AUGSTER_RIGOROUS)
    augster_names = [s.name for s in augster.stages]
    assert augster_names[-1] == "Reflect"


def test_custom_output_path(tmp_path):
    """Test custom output path."""
    custom_path = tmp_path / "custom" / "WORKFLOW.md"
    hub = GenerateWorkflowHubPrimitive(output_path=custom_path)

    assert hub.output_path == custom_path


def test_characteristics_differ_by_mode(workflow_hub):
    """Test each mode has distinct characteristics."""
    rapid = workflow_hub.get_profile(WorkflowMode.RAPID)
    standard = workflow_hub.get_profile(WorkflowMode.STANDARD)
    augster = workflow_hub.get_profile(WorkflowMode.AUGSTER_RIGOROUS)

    # Each should have unique characteristics
    assert "Fast iteration" in rapid.characteristics
    assert "Balanced rigor" in standard.characteristics
    assert "Maximum rigor" in augster.characteristics

    # Risk tolerance should differ
    assert any("higher risk" in c.lower() for c in rapid.characteristics)
    assert any("moderate risk" in c.lower() for c in standard.characteristics)
    assert any("minimal risk" in c.lower() for c in augster.characteristics)


def test_use_case_specificity(workflow_hub):
    """Test use cases are specific to each mode."""
    rapid = workflow_hub.get_profile(WorkflowMode.RAPID)
    standard = workflow_hub.get_profile(WorkflowMode.STANDARD)
    augster = workflow_hub.get_profile(WorkflowMode.AUGSTER_RIGOROUS)

    assert (
        "prototyping" in rapid.use_case.lower()
        or "proof-of-concept" in rapid.use_case.lower()
    )
    assert (
        "regular development" in standard.use_case.lower()
        or "feature" in standard.use_case.lower()
    )
    assert (
        "production" in augster.use_case.lower()
        or "critical" in augster.use_case.lower()
    )


def test_profile_completeness(workflow_hub):
    """Test all profiles have required fields."""
    for mode, profile in workflow_hub.profiles.items():
        assert profile.mode == mode
        assert profile.display_name
        assert profile.use_case
        assert profile.characteristics
        assert len(profile.stages) > 0
        assert profile.quality_gates
        assert isinstance(profile.is_default, bool)


def test_stage_completeness(workflow_hub):
    """Test all stages have required fields."""
    for profile in workflow_hub.profiles.values():
        for stage in profile.stages:
            assert stage.name
            assert stage.description
            assert stage.memory_layers
            assert isinstance(stage.quality_gates, list)  # Can be empty
            assert stage.duration_estimate
